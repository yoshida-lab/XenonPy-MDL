Error: Error while parsing /root/database/seed.graphql:
Error while executing operation:
Argument 'data' expected type 'ModelCreateInput!' but got: {name: "test.model", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: "xxx.yyy/zzz1", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}. Reason: 'package' Field 'package' is not defined in the input type 'ModelCreateInput'. (line 32, column 29):
  model1: createModel(data: {name: "test.model", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: "xxx.yyy/zzz1", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}) {
                            ^
 (line 32, column 181):
  model1: createModel(data: {name: "test.model", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: "xxx.yyy/zzz1", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}) {
                                                                                                                                                                                    ^: {"response":{"data":null,"errors":[{"message":"Argument 'data' expected type 'ModelCreateInput!' but got: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: \"xxx.yyy/zzz1\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}. Reason: 'package' Field 'package' is not defined in the input type 'ModelCreateInput'. (line 32, column 29):\n  model1: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: \"xxx.yyy/zzz1\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}) {\n                            ^\n (line 32, column 181):\n  model1: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: \"xxx.yyy/zzz1\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}) {\n                                                                                                                                                                                    ^","locations":[{"line":32,"column":29},{"line":32,"column":181}]},{"message":"Argument 'data' expected type 'ModelCreateInput!' but got: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: \"xxx.yyy/zzz1\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}. Reason: 'lang' Not-null field 'lang' of type 'String!' defined in the 'ModelCreateInput' input type is missing. (line 32, column 29):\n  model1: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: \"xxx.yyy/zzz1\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}) {\n                            ^","locations":[{"line":32,"column":29}]},{"message":"Argument 'create' expected type 'SummaryCreateInput!' but got: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: true, models: {connect: {id: 1}}}. Reason: 'package' Field 'package' is not defined in the input type 'SummaryCreateInput'. (line 35, column 163):\n  summary_model1: upsertSummary(where: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\"}, update: {models: {connect: {id: 1}}}, create: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: true, models: {connect: {id: 1}}}) {\n                                                                                                                                                                  ^\n (line 35, column 239):\n  summary_model1: upsertSummary(where: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\"}, update: {models: {connect: {id: 1}}}, create: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: true, models: {connect: {id: 1}}}) {\n                                                                                                                                                                                                                                              ^","locations":[{"line":35,"column":163},{"line":35,"column":239}]},{"message":"Argument 'data' expected type 'ModelCreateInput!' but got: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: \"xxx.yyy/zzz2\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, transferred: true, fromSources: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}. Reason: 'package' Field 'package' is not defined in the input type 'ModelCreateInput'. (line 38, column 29):\n  model2: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: \"xxx.yyy/zzz2\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, transferred: true, fromSources: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}) {\n                            ^\n (line 38, column 181):\n  model2: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: \"xxx.yyy/zzz2\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, transferred: true, fromSources: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}) {\n                                                                                                                                                                                    ^","locations":[{"line":38,"column":29},{"line":38,"column":181}]},{"message":"Argument 'data' expected type 'ModelCreateInput!' but got: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: \"xxx.yyy/zzz2\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, transferred: true, fromSources: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}. Reason: 'lang' Not-null field 'lang' of type 'String!' defined in the 'ModelCreateInput' input type is missing. (line 38, column 29):\n  model2: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: \"xxx.yyy/zzz2\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, transferred: true, fromSources: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}) {\n                            ^","locations":[{"line":38,"column":29}]},{"message":"Argument 'create' expected type 'SummaryCreateInput!' but got: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: true, transferred: true, models: {connect: {id: 2}}}. Reason: 'package' Field 'package' is not defined in the input type 'SummaryCreateInput'. (line 41, column 163):\n  summary_model2: upsertSummary(where: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\"}, update: {models: {connect: {id: 2}}}, create: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: true, transferred: true, models: {connect: {id: 2}}}) {\n                                                                                                                                                                  ^\n (line 41, column 239):\n  summary_model2: upsertSummary(where: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\"}, update: {models: {connect: {id: 2}}}, create: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: true, transferred: true, models: {connect: {id: 2}}}) {\n                                                                                                                                                                                                                                              ^","locations":[{"line":41,"column":163},{"line":41,"column":239}]},{"message":"Argument 'data' expected type 'ModelCreateInput!' but got: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: false, url: \"xxx.yyy/zzz3\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 2}}, classificationMetric: {create: {precision: 0.9, recall: 0.87, f1: 0.9}}}. Reason: 'package' Field 'package' is not defined in the input type 'ModelCreateInput'. (line 44, column 29):\n  model3: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: false, url: \"xxx.yyy/zzz3\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 2}}, classificationMetric: {create: {precision: 0.9, recall: 0.87, f1: 0.9}}}) {\n                            ^\n (line 44, column 182):\n  model3: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: false, url: \"xxx.yyy/zzz3\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 2}}, classificationMetric: {create: {precision: 0.9, recall: 0.87, f1: 0.9}}}) {\n                                                                                                                                                                                     ^","locations":[{"line":44,"column":29},{"line":44,"column":182}]},{"message":"Argument 'data' expected type 'ModelCreateInput!' but got: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: false, url: \"xxx.yyy/zzz3\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 2}}, classificationMetric: {create: {precision: 0.9, recall: 0.87, f1: 0.9}}}. Reason: 'lang' Not-null field 'lang' of type 'String!' defined in the 'ModelCreateInput' input type is missing. (line 44, column 29):\n  model3: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: false, url: \"xxx.yyy/zzz3\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 2}}, classificationMetric: {create: {precision: 0.9, recall: 0.87, f1: 0.9}}}) {\n                            ^","locations":[{"line":44,"column":29}]},{"message":"Argument 'create' expected type 'SummaryCreateInput!' but got: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: false, models: {connect: {id: 3}}}. Reason: 'package' Field 'package' is not defined in the input type 'SummaryCreateInput'. (line 47, column 163):\n  summary_model3: upsertSummary(where: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\"}, update: {models: {connect: {id: 3}}}, create: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: false, models: {connect: {id: 3}}}) {\n                                                                                                                                                                  ^\n (line 47, column 239):\n  summary_model3: upsertSummary(where: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\"}, update: {models: {connect: {id: 3}}}, create: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: false, models: {connect: {id: 3}}}) {\n                                                                                                                                                                                                                                              ^","locations":[{"line":47,"column":163},{"line":47,"column":239}]},{"message":"Argument 'data' expected type 'ModelCreateInput!' but got: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: false, url: \"xxx.yyy/zzz4\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, transferred: true, fromSources: {connect: {id: 3}}, owner: {connect: {id: 2}}, classificationMetric: {create: {precision: 0.9, recall: 0.87, f1: 0.9}}}. Reason: 'package' Field 'package' is not defined in the input type 'ModelCreateInput'. (line 50, column 29):\n  model4: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: false, url: \"xxx.yyy/zzz4\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, transferred: true, fromSources: {connect: {id: 3}}, owner: {connect: {id: 2}}, classificationMetric: {create: {precision: 0.9, recall: 0.87, f1: 0.9}}}) {\n                            ^\n (line 50, column 182):\n  model4: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: false, url: \"xxx.yyy/zzz4\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, transferred: true, fromSources: {connect: {id: 3}}, owner: {connect: {id: 2}}, classificationMetric: {create: {precision: 0.9, recall: 0.87, f1: 0.9}}}) {\n                                                                                                                                                                                     ^","locations":[{"line":50,"column":29},{"line":50,"column":182}]},{"message":"Argument 'data' expected type 'ModelCreateInput!' but got: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: false, url: \"xxx.yyy/zzz4\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, transferred: true, fromSources: {connect: {id: 3}}, owner: {connect: {id: 2}}, classificationMetric: {create: {precision: 0.9, recall: 0.87, f1: 0.9}}}. Reason: 'lang' Not-null field 'lang' of type 'String!' defined in the 'ModelCreateInput' input type is missing. (line 50, column 29):\n  model4: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: false, url: \"xxx.yyy/zzz4\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, transferred: true, fromSources: {connect: {id: 3}}, owner: {connect: {id: 2}}, classificationMetric: {create: {precision: 0.9, recall: 0.87, f1: 0.9}}}) {\n                            ^","locations":[{"line":50,"column":29}]},{"message":"Argument 'create' expected type 'SummaryCreateInput!' but got: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: false, transferred: true, models: {connect: {id: 4}}}. Reason: 'package' Field 'package' is not defined in the input type 'SummaryCreateInput'. (line 53, column 163):\n  summary_model4: upsertSummary(where: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\"}, update: {models: {connect: {id: 4}}}, create: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: false, transferred: true, models: {connect: {id: 4}}}) {\n                                                                                                                                                                  ^\n (line 53, column 239):\n  summary_model4: upsertSummary(where: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\"}, update: {models: {connect: {id: 4}}}, create: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: false, transferred: true, models: {connect: {id: 4}}}) {\n                                                                                                                                                                                                                                              ^","locations":[{"line":53,"column":163},{"line":53,"column":239}]}],"status":200},"request":{"query":"mutation {\n  user1: createUser(data: {nickname: \"test.user1\", email: \"test.user1@mail.com\", role: TEST}) {\n    id\n  }\n  user2: createUser(data: {nickname: \"test.user2\", email: \"test.user2@mail.com\", role: TEST}) {\n    id\n  }\n  org1: createOrganization(data: {name: \"test.org1\", owner: {connect: {id: 1}}, members: {connect: {id: 2}}}) {\n    id\n  }\n  org2: createOrganization(data: {name: \"test.org2\", owner: {connect: {id: 2}}, members: {connect: {id: 1}}}) {\n    id\n  }\n  createTag(data: {tag: \"test.tag\", owner: {connect: {id: 2}}}) {\n    id\n  }\n  upsertPackage(where: {name: \"test.lang.pack\"}, update: {models: {connect: {id: 1}}}, create: {name: \"test.lang.pack\", owner: {connect: {id: 1}}}) {\n    id\n  }\n  upsertMethod(where: {name: \"test.method\"}, update: {models: {connect: {id: 1}}}, create: {name: \"test.method\", owner: {connect: {id: 1}}}) {\n    id\n  }\n  upsertProperty(where: {name: \"test.property\"}, update: {models: {connect: {id: 1}}}, create: {name: \"test.property\", describe: \"Fake property.\", unit: \"Fake/fake\", owner: {connect: {id: 1}}}) {\n    id\n  }\n  upsertDescriptor(where: {name: \"test.descriptor\"}, update: {models: {connect: {id: 1}}}, create: {name: \"test.descriptor\", describe: \"Fake descriptor.\", owner: {connect: {id: 1}}}) {\n    id\n  }\n  upsertModelset(where: {name: \"test.modelset\"}, update: {models: {connect: {id: 1}}}, create: {name: \"test.modelset\", describe: \"Fake modelset. This model set is only for api test.\", sId: \"S0\", owner: {connect: {id: 1}}, contributors: {connect: {id: 2}}, tags: {connect: {id: 1}}}) {\n    id\n  }\n  model1: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: \"xxx.yyy/zzz1\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}) {\n    id\n  }\n  summary_model1: upsertSummary(where: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\"}, update: {models: {connect: {id: 1}}}, create: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: true, models: {connect: {id: 1}}}) {\n    id\n  }\n  model2: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: true, url: \"xxx.yyy/zzz2\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, transferred: true, fromSources: {connect: {id: 1}}, owner: {connect: {id: 1}}, regressionMetric: {create: {r2: 0.9, maxAbsError: 0.001, pearsonCorr: 0.99}}}) {\n    id\n  }\n  summary_model2: upsertSummary(where: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\"}, update: {models: {connect: {id: 2}}}, create: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: true, transferred: true, models: {connect: {id: 2}}}) {\n    id\n  }\n  model3: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: false, url: \"xxx.yyy/zzz3\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, owner: {connect: {id: 2}}, classificationMetric: {create: {precision: 0.9, recall: 0.87, f1: 0.9}}}) {\n    id\n  }\n  summary_model3: upsertSummary(where: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\"}, update: {models: {connect: {id: 3}}}, create: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: false, models: {connect: {id: 3}}}) {\n    id\n  }\n  model4: createModel(data: {name: \"test.model\", method: {connect: {id: 1}}, property: {connect: {id: 1}}, descriptor: {connect: {id: 1}}, isRegression: false, url: \"xxx.yyy/zzz4\", package: {connect: {id: 1}}, modelset: {connect: {id: 1}}, transferred: true, fromSources: {connect: {id: 3}}, owner: {connect: {id: 2}}, classificationMetric: {create: {precision: 0.9, recall: 0.87, f1: 0.9}}}) {\n    id\n  }\n  summary_model4: upsertSummary(where: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\"}, update: {models: {connect: {id: 4}}}, create: {identifier: \"S0/test.property/test.descriptor/test.method/test.lang.pack\", package: \"test.lang.pack\", descriptor: \"test.descriptor\", method: \"test.method\", property: \"test.property\", modelset: \"test.mdoelset\", regression: false, transferred: true, models: {connect: {id: 4}}}) {\n    id\n  }\n}\n"}}
    at Seeder.<anonymous> (/root/node_modules/prisma-cli-core/src/commands/seed/Seeder.ts:129:13)
    at step (/root/node_modules/prisma-cli-core/dist/commands/seed/Seeder.js:32:23)
    at Object.throw (/root/node_modules/prisma-cli-core/dist/commands/seed/Seeder.js:13:53)
    at rejected (/root/node_modules/prisma-cli-core/dist/commands/seed/Seeder.js:5:65)
    at process._tickCallback (internal/process/next_tick.js:68:7)
{ Error: Syntax error while parsing GraphQL query. Invalid input '/', expected OperationDefinition, FragmentDefinition or TypeSystemDefinition (line 100, column 1):
// todo
^: {"response":{"data":{"deploy":null},"errors":[{"locations":[{"line":2,"column":9}],"path":["deploy"],"code":3017,"message":"Syntax error while parsing GraphQL query. Invalid input '/', expected OperationDefinition, FragmentDefinition or TypeSystemDefinition (line 100, column 1):\n// todo\n^","requestId":"local:ck0ankx8800050747jjgn5nbo"}],"status":200},"request":{"query":"      mutation($name: String!, $stage: String! $types: String! $dryRun: Boolean $secrets: [String!], $subscriptions: [FunctionInput!], $force: Boolean) {\n        deploy(input: {\n          name: $name\n          stage: $stage\n          types: $types\n          dryRun: $dryRun\n          secrets: $secrets\n          subscriptions: $subscriptions\n          force: $force\n          \n        }) {\n          errors {\n            type\n            field\n            description\n          }\n          warnings {\n            type\n            field\n            description\n          }\n          migration {\n            ...MigrationFragment\n          }\n          \n          steps { \n  type\n  __typename\n  ... on CreateEnum {\n    name\n    ce_values: values\n  }\n  ... on CreateField {\n    model\n    name\n    cf_typeName: typeName\n    cf_isRequired: isRequired\n    cf_isList: isList\n    cf_isUnique: unique\n    cf_relation: relation\n    cf_defaultValue: default\n    cf_enum: enum\n  }\n  ... on CreateModel {\n    name\n  }\n  ... on CreateRelation {\n    name\n    leftModel\n    rightModel\n    after { \n  type\n  ... on Inline {\n    model\n    column\n  }\n\n  ... on LinkTable {\n    table\n    modelAColumn\n    modelBColumn\n    idColumn\n    type\n  }\n }\n  }\n  \n    ... on UpdateRelation {\n      ur_name: name\n      ur_newName: newName\n      before { \n  type\n  ... on Inline {\n    model\n    column\n  }\n\n  ... on LinkTable {\n    table\n    modelAColumn\n    modelBColumn\n    idColumn\n    type\n  }\n }\n      ur_after: after { \n  type\n  ... on Inline {\n    model\n    column\n  }\n\n  ... on LinkTable {\n    table\n    modelAColumn\n    modelBColumn\n    idColumn\n    type\n  }\n }\n    }\n  \n  ... on DeleteEnum {\n    name\n  }\n  ... on DeleteField {\n    model\n    name\n  }\n  ... on DeleteModel {\n    name\n  }\n  ... on DeleteRelation {\n    name\n  }\n  ... on UpdateEnum {\n    name\n    newName\n    values\n  }\n  ... on UpdateField {\n    model\n    name\n    newName\n    typeName\n    isRequired\n    isList\n    isUnique: unique\n    relation\n    default\n    enum\n  }\n  ... on UpdateModel {\n    name\n    um_newName: newName\n  }\n }\n        }\n      }\n      \n  fragment MigrationFragment on Migration {\n    revision\n    steps {\n      \n  type\n  __typename\n  ... on CreateEnum {\n    name\n    ce_values: values\n  }\n  ... on CreateField {\n    model\n    name\n    cf_typeName: typeName\n    cf_isRequired: isRequired\n    cf_isList: isList\n    cf_isUnique: unique\n    cf_relation: relation\n    cf_defaultValue: default\n    cf_enum: enum\n  }\n  ... on CreateModel {\n    name\n  }\n  ... on CreateRelation {\n    name\n    leftModel\n    rightModel\n    after { \n  type\n  ... on Inline {\n    model\n    column\n  }\n\n  ... on LinkTable {\n    table\n    modelAColumn\n    modelBColumn\n    idColumn\n    type\n  }\n }\n  }\n  \n    ... on UpdateRelation {\n      ur_name: name\n      ur_newName: newName\n      before { \n  type\n  ... on Inline {\n    model\n    column\n  }\n\n  ... on LinkTable {\n    table\n    modelAColumn\n    modelBColumn\n    idColumn\n    type\n  }\n }\n      ur_after: after { \n  type\n  ... on Inline {\n    model\n    column\n  }\n\n  ... on LinkTable {\n    table\n    modelAColumn\n    modelBColumn\n    idColumn\n    type\n  }\n }\n    }\n  \n  ... on DeleteEnum {\n    name\n  }\n  ... on DeleteField {\n    model\n    name\n  }\n  ... on DeleteModel {\n    name\n  }\n  ... on DeleteRelation {\n    name\n  }\n  ... on UpdateEnum {\n    name\n    newName\n    values\n  }\n  ... on UpdateField {\n    model\n    name\n    newName\n    typeName\n    isRequired\n    isList\n    isUnique: unique\n    relation\n    default\n    enum\n  }\n  ... on UpdateModel {\n    name\n    um_newName: newName\n  }\n\n    }\n  }\n\n    ","variables":{"name":"xenondb","stage":"dev","types":"scalar Json\n\ntype Model {\n  id: Int! @id\n  createdAt: DateTime! @createdAt\n  updatedAt: DateTime! @updatedAt\n  url: String! @unique\n  name: String!\n  isRegression: Boolean!\n  modelset: Modelset!\n  method: Method!\n  property: Property!\n  descriptor: Descriptor!\n  lang: String!\n  transferred: Boolean @default(value: false)\n  asSources: [Model!]! @relation(name: \"Transfer\")\n  fromSources: [Model!]! @relation(name: \"Transfer\")\n  succeed: Boolean @default(value: true)\n  trainingENV: Json @default(value: \"{}\")\n  trainingInfo: Json @default(value: \"{}\")\n  regressionMetric: RegressionMetric @relation(name: \"RegMetricWithModel\", onDelete: CASCADE)\n  classificationMetric: ClassificationMetric\n    @relation(name: \"ClsMetricWithModel\", onDelete: CASCADE)\n  owner: User!\n}\n\ntype RegressionMetric {\n  id: Int! @id\n  model: Model! @relation(link: INLINE, name: \"RegMetricWithModel\")\n  meanAbsError: Float\n  maxAbsError: Float\n  meanSquareError: Float\n  rootMeanSquareError: Float\n  r2: Float\n  pValue: Float\n  spearmanCorr: Float\n  pearsonCorr: Float\n  supplementary: Json @default(value: \"{}\")\n}\n\ntype ClassificationMetric {\n  id: Int! @id\n  model: Model! @relation(link: INLINE, name: \"ClsMetricWithModel\")\n  precision: Float\n  recall: Float\n  f1: Float\n  sensitivity: Float\n  prevalence: Float\n  specificity: Float\n  ppv: Float\n  npv: Float\n  supplementary: Json @default(value: \"{}\")\n}\n\ntype Tag {\n  id: Int! @id\n  tag: String! @unique\n  owner: User!\n  modelSets: [Modelset!]!\n}\n\ntype Property {\n  id: Int! @id\n  name: String! @unique\n  fullName: String\n  symbol: String\n  unit: String\n  describe: String! @default(value: \"\")\n  owner: User!\n  models: [Model!]!\n}\n\ntype Method {\n  id: Int! @id\n  name: String! @unique\n  fullName: String\n  describe: String! @default(value: \"\")\n  owner: User!\n  models: [Model!]!\n}\n\ntype Descriptor {\n  id: Int! @id\n  name: String! @unique\n  fullName: String\n  describe: String! @default(value: \"\")\n  owner: User!\n  models: [Model!]!\n}\n\ntype Package {\n  id: Int! @id\n  name: String! @unique\n  describe: String! @default(value: \"\")\n  url: String! @default(value: \"\")\n  owner: User!\n  referredBy: [Modelset!]! @relation(name: \"PackageReferredByModelsets\")\n}\n\n// todo\ntype vocabulary {\n  id: Int! @id\n  word: String! @unique\n}\n\ntype Artifact {\n  id: Int! @id\n  url: String! @unique\n  fileName: String!\n  owner: User!\n}\n\ntype User {\n  id: Int! @id\n  createdAt: DateTime! @createdAt\n  updatedAt: DateTime! @updatedAt\n  nickname: String! @unique\n  email: String! @unique\n  avatar: String\n  apiKey: String @unique\n  role: Role! @default(value: USER)\n  ownedOrganizations: [Organization!]! @relation(name: \"OrganizationOwner\")\n  joinedOrganizations: [Organization!]! @relation(name: \"OrganizationMembers\")\n  ownedModelSets: [Modelset!]! @relation(name: \"ModelSetOwner\")\n  contributedModelSets: [Modelset!]! @relation(name: \"ModelSetContributors\")\n  ownedModels: [Model!]!\n  ownedArtifacts: [Artifact!]!\n  ownedPackages: [Package!]!\n  ownedDescriptors: [Descriptor!]!\n  ownedMethods: [Method!]!\n  ownedPropertys: [Property!]!\n  ownedTags: [Tag!]!\n}\n\nenum Role {\n  TEST\n  USER\n  ADMIN\n}\n\ntype Organization {\n  id: Int! @id\n  createdAt: DateTime! @createdAt\n  updatedAt: DateTime! @updatedAt\n  name: String! @unique\n  describe: String! @default(value: \"\")\n  modelSets: [Modelset!]!\n  owner: User! @relation(name: \"OrganizationOwner\")\n  members: [User!]! @relation(name: \"OrganizationMembers\")\n}\n\ntype Modelset {\n  id: Int! @id\n  createdAt: DateTime! @createdAt\n  updatedAt: DateTime! @updatedAt\n  private: Boolean! @default(value: false)\n  name: String @unique\n  sId: String @unique\n  describe: String! @default(value: \"\")\n  sampleCode: String\n  artifacts: [Artifact!]! @relation(onDelete: CASCADE)\n  owner: User! @relation(name: \"ModelSetOwner\")\n  contributors: [User!]! @relation(name: \"ModelSetContributors\")\n  tags: [Tag!]!\n  packages: [Package!]! @relation(name: \"PackageReferredByModelsets\")\n  models: [Model!]! @relation(onDelete: CASCADE)\n}\n\n","secrets":null,"subscriptions":[],"force":true}}}
    at GraphQLClient.<anonymous> (/root/node_modules/graphql-request/src/index.ts:72:13)
    at step (/root/node_modules/graphql-request/dist/src/index.js:40:23)
    at Object.next (/root/node_modules/graphql-request/dist/src/index.js:21:53)
    at fulfilled (/root/node_modules/graphql-request/dist/src/index.js:12:58)
    at process._tickCallback (internal/process/next_tick.js:68:7)
  response:
   { data: { deploy: null }, errors: [ [Object] ], status: 200 },
  request:
   { query:
      '      mutation($name: String!, $stage: String! $types: String! $dryRun: Boolean $secrets: [String!], $subscriptions: [FunctionInput!], $force: Boolean) {\n        deploy(input: {\n          name: $name\n          stage: $stage\n          types: $types\n          dryRun: $dryRun\n          secrets: $secrets\n          subscriptions: $subscriptions\n          force: $force\n          \n        }) {\n          errors {\n            type\n            field\n            description\n          }\n          warnings {\n            type\n            field\n            description\n          }\n          migration {\n            ...MigrationFragment\n          }\n          \n          steps { \n  type\n  __typename\n  ... on CreateEnum {\n    name\n    ce_values: values\n  }\n  ... on CreateField {\n    model\n    name\n    cf_typeName: typeName\n    cf_isRequired: isRequired\n    cf_isList: isList\n    cf_isUnique: unique\n    cf_relation: relation\n    cf_defaultValue: default\n    cf_enum: enum\n  }\n  ... on CreateModel {\n    name\n  }\n  ... on CreateRelation {\n    name\n    leftModel\n    rightModel\n    after { \n  type\n  ... on Inline {\n    model\n    column\n  }\n\n  ... on LinkTable {\n    table\n    modelAColumn\n    modelBColumn\n    idColumn\n    type\n  }\n }\n  }\n  \n    ... on UpdateRelation {\n      ur_name: name\n      ur_newName: newName\n      before { \n  type\n  ... on Inline {\n    model\n    column\n  }\n\n  ... on LinkTable {\n    table\n    modelAColumn\n    modelBColumn\n    idColumn\n    type\n  }\n }\n      ur_after: after { \n  type\n  ... on Inline {\n    model\n    column\n  }\n\n  ... on LinkTable {\n    table\n    modelAColumn\n    modelBColumn\n    idColumn\n    type\n  }\n }\n    }\n  \n  ... on DeleteEnum {\n    name\n  }\n  ... on DeleteField {\n    model\n    name\n  }\n  ... on DeleteModel {\n    name\n  }\n  ... on DeleteRelation {\n    name\n  }\n  ... on UpdateEnum {\n    name\n    newName\n    values\n  }\n  ... on UpdateField {\n    model\n    name\n    newName\n    typeName\n    isRequired\n    isList\n    isUnique: unique\n    relation\n    default\n    enum\n  }\n  ... on UpdateModel {\n    name\n    um_newName: newName\n  }\n }\n        }\n      }\n      \n  fragment MigrationFragment on Migration {\n    revision\n    steps {\n      \n  type\n  __typename\n  ... on CreateEnum {\n    name\n    ce_values: values\n  }\n  ... on CreateField {\n    model\n    name\n    cf_typeName: typeName\n    cf_isRequired: isRequired\n    cf_isList: isList\n    cf_isUnique: unique\n    cf_relation: relation\n    cf_defaultValue: default\n    cf_enum: enum\n  }\n  ... on CreateModel {\n    name\n  }\n  ... on CreateRelation {\n    name\n    leftModel\n    rightModel\n    after { \n  type\n  ... on Inline {\n    model\n    column\n  }\n\n  ... on LinkTable {\n    table\n    modelAColumn\n    modelBColumn\n    idColumn\n    type\n  }\n }\n  }\n  \n    ... on UpdateRelation {\n      ur_name: name\n      ur_newName: newName\n      before { \n  type\n  ... on Inline {\n    model\n    column\n  }\n\n  ... on LinkTable {\n    table\n    modelAColumn\n    modelBColumn\n    idColumn\n    type\n  }\n }\n      ur_after: after { \n  type\n  ... on Inline {\n    model\n    column\n  }\n\n  ... on LinkTable {\n    table\n    modelAColumn\n    modelBColumn\n    idColumn\n    type\n  }\n }\n    }\n  \n  ... on DeleteEnum {\n    name\n  }\n  ... on DeleteField {\n    model\n    name\n  }\n  ... on DeleteModel {\n    name\n  }\n  ... on DeleteRelation {\n    name\n  }\n  ... on UpdateEnum {\n    name\n    newName\n    values\n  }\n  ... on UpdateField {\n    model\n    name\n    newName\n    typeName\n    isRequired\n    isList\n    isUnique: unique\n    relation\n    default\n    enum\n  }\n  ... on UpdateModel {\n    name\n    um_newName: newName\n  }\n\n    }\n  }\n\n    ',
     variables:
      { name: 'xenondb',
        stage: 'dev',
        types:
         'scalar Json\n\ntype Model {\n  id: Int! @id\n  createdAt: DateTime! @createdAt\n  updatedAt: DateTime! @updatedAt\n  url: String! @unique\n  name: String!\n  isRegression: Boolean!\n  modelset: Modelset!\n  method: Method!\n  property: Property!\n  descriptor: Descriptor!\n  lang: String!\n  transferred: Boolean @default(value: false)\n  asSources: [Model!]! @relation(name: "Transfer")\n  fromSources: [Model!]! @relation(name: "Transfer")\n  succeed: Boolean @default(value: true)\n  trainingENV: Json @default(value: "{}")\n  trainingInfo: Json @default(value: "{}")\n  regressionMetric: RegressionMetric @relation(name: "RegMetricWithModel", onDelete: CASCADE)\n  classificationMetric: ClassificationMetric\n    @relation(name: "ClsMetricWithModel", onDelete: CASCADE)\n  owner: User!\n}\n\ntype RegressionMetric {\n  id: Int! @id\n  model: Model! @relation(link: INLINE, name: "RegMetricWithModel")\n  meanAbsError: Float\n  maxAbsError: Float\n  meanSquareError: Float\n  rootMeanSquareError: Float\n  r2: Float\n  pValue: Float\n  spearmanCorr: Float\n  pearsonCorr: Float\n  supplementary: Json @default(value: "{}")\n}\n\ntype ClassificationMetric {\n  id: Int! @id\n  model: Model! @relation(link: INLINE, name: "ClsMetricWithModel")\n  precision: Float\n  recall: Float\n  f1: Float\n  sensitivity: Float\n  prevalence: Float\n  specificity: Float\n  ppv: Float\n  npv: Float\n  supplementary: Json @default(value: "{}")\n}\n\ntype Tag {\n  id: Int! @id\n  tag: String! @unique\n  owner: User!\n  modelSets: [Modelset!]!\n}\n\ntype Property {\n  id: Int! @id\n  name: String! @unique\n  fullName: String\n  symbol: String\n  unit: String\n  describe: String! @default(value: "")\n  owner: User!\n  models: [Model!]!\n}\n\ntype Method {\n  id: Int! @id\n  name: String! @unique\n  fullName: String\n  describe: String! @default(value: "")\n  owner: User!\n  models: [Model!]!\n}\n\ntype Descriptor {\n  id: Int! @id\n  name: String! @unique\n  fullName: String\n  describe: String! @default(value: "")\n  owner: User!\n  models: [Model!]!\n}\n\ntype Package {\n  id: Int! @id\n  name: String! @unique\n  describe: String! @default(value: "")\n  url: String! @default(value: "")\n  owner: User!\n  referredBy: [Modelset!]! @relation(name: "PackageReferredByModelsets")\n}\n\n// todo\ntype vocabulary {\n  id: Int! @id\n  word: String! @unique\n}\n\ntype Artifact {\n  id: Int! @id\n  url: String! @unique\n  fileName: String!\n  owner: User!\n}\n\ntype User {\n  id: Int! @id\n  createdAt: DateTime! @createdAt\n  updatedAt: DateTime! @updatedAt\n  nickname: String! @unique\n  email: String! @unique\n  avatar: String\n  apiKey: String @unique\n  role: Role! @default(value: USER)\n  ownedOrganizations: [Organization!]! @relation(name: "OrganizationOwner")\n  joinedOrganizations: [Organization!]! @relation(name: "OrganizationMembers")\n  ownedModelSets: [Modelset!]! @relation(name: "ModelSetOwner")\n  contributedModelSets: [Modelset!]! @relation(name: "ModelSetContributors")\n  ownedModels: [Model!]!\n  ownedArtifacts: [Artifact!]!\n  ownedPackages: [Package!]!\n  ownedDescriptors: [Descriptor!]!\n  ownedMethods: [Method!]!\n  ownedPropertys: [Property!]!\n  ownedTags: [Tag!]!\n}\n\nenum Role {\n  TEST\n  USER\n  ADMIN\n}\n\ntype Organization {\n  id: Int! @id\n  createdAt: DateTime! @createdAt\n  updatedAt: DateTime! @updatedAt\n  name: String! @unique\n  describe: String! @default(value: "")\n  modelSets: [Modelset!]!\n  owner: User! @relation(name: "OrganizationOwner")\n  members: [User!]! @relation(name: "OrganizationMembers")\n}\n\ntype Modelset {\n  id: Int! @id\n  createdAt: DateTime! @createdAt\n  updatedAt: DateTime! @updatedAt\n  private: Boolean! @default(value: false)\n  name: String @unique\n  sId: String @unique\n  describe: String! @default(value: "")\n  sampleCode: String\n  artifacts: [Artifact!]! @relation(onDelete: CASCADE)\n  owner: User! @relation(name: "ModelSetOwner")\n  contributors: [User!]! @relation(name: "ModelSetContributors")\n  tags: [Tag!]!\n  packages: [Package!]! @relation(name: "PackageReferredByModelsets")\n  models: [Model!]! @relation(onDelete: CASCADE)\n}\n\n',
        dryRun: undefined,
        secrets: null,
        subscriptions: [],
        force: true } } }
